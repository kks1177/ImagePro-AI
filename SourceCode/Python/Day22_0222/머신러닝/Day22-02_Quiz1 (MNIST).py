# Day22-02_Quiz1 (MNIST).py
# *********************** < 모든 인공지능 처리 과정 절차 > *************************
# 0. 데이터 준비 --> 150건
# 1. (중요!) 학습용 데이터와 테스트(=모의고사)용 데이터를 분리
# 2. 학습 방법을 결정 (=머신 러닝 알고리즘을 선택) --> 다양함, Knn, SVM, SVC .....
# 3. 학습(=훈련) 시키기 --> 오래 걸림 --> 모델(=인공지능) 생성       # 모델 : 빈 머리
# 4. 모델의 정답률 구하기 (모의고사 시험)
# (5. 정답을 모르는 데이터를 가지고 예측! 해보기)
# *****************************************************************************
# MNIST. 머신러닝 프로젝트
# KNN 알고리즘


from sklearn.neighbors import KNeighborsClassifier      # KNN 알고리즘              # 머신러닝 : 암기
from sklearn.neural_network import MLPClassifier        # 다층 신경망 (딥러닝!!)     # 딥러닝 : 이해

from sklearn import metrics, utils
import pandas as pd         # .csv 또는 엑셀 파일 처리가 편리

# 0. 데이터(=문제집) 준비 --> 150건
df_train = pd.read_csv('csvFile/mnist_train.csv')    # DataFrame == 2차원 배열 == 워크시트
df_train = utils.shuffle(df_train)                 # (중요!) .csv에 있는 데이터를 섞어줌
df_test = pd.read_csv('csvFile/mnist_test.csv')    # DataFrame == 2차원 배열 == 워크시트
df_test = utils.shuffle(df_test)                 # (중요!) .csv에 있는 데이터를 섞어줌

# 1. (중요!) 학습용 데이터와 테스트(=모의고사)용 데이터를 분리
dataLen_train = df_train.shape[0]    # 데이터 개수 (150)
trainSize = dataLen_train
train_label = df_train.iloc[0:trainSize, [0]]    # 학습용 정답지
train_data = df_train.iloc[0:trainSize, 1:]      # 학습용 문제집

# 테스트 데이터로 학습된 모델 테스트 (성능 결정)
dataLen_test = df_test.shape[0]      # 데이터 개수 (150)
testSize = dataLen_test
test_label = df_test.iloc[0:testSize, [0]]      # 테스트용 정답지
test_data = df_test.iloc[0:testSize, 1:]        # 테스트용 문제집

# 2. 학습 방법을 결정 (=머신 러닝 알고리즘을 선택) --> 다양함, Knn, SVM, SVC .....
print(" < KNN 알고리즘 > ")
clf = KNeighborsClassifier(n_neighbors=3)
#clf = MLPClassifier()

# 3. 학습(=훈련) 시키기 --> 오래 걸림 --> 모델(=인공지능) 생성       # 모델 : 빈 머리
clf.fit(train_data, train_label)        # 학습 (=훈련)

# 4. 모델의 정답률 구하기 (모의고사 시험)
results = clf.predict(test_data)      # 테스트 문제만 제공
score = metrics.accuracy_score(results, test_label)      # 테스트 문제 푼 것에 대한 점수 리턴
print("정답률 : %5.2f" % score)

# # (5. 정답을 모르는 데이터를 가지고 예측! 해보기)
# # 내가 손으로 쓴 숫자를 스캔해서 28x28로 변환       # 가장 앞 인덱스(5) 하나 지우기
# myNumber =[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,67,232,39,0,0,0,0,0,0,0,0,0,62,81,0,0,0,0,0,0,0,0,0,0,0,0,0,0,120,180,39,0,0,0,0,0,0,0,0,0,126,163,0,0,0,0,0,0,0,0,0,0,0,0,0,2,153,210,40,0,0,0,0,0,0,0,0,0,220,163,0,0,0,0,0,0,0,0,0,0,0,0,0,27,254,162,0,0,0,0,0,0,0,0,0,0,222,163,0,0,0,0,0,0,0,0,0,0,0,0,0,183,254,125,0,0,0,0,0,0,0,0,0,46,245,163,0,0,0,0,0,0,0,0,0,0,0,0,0,198,254,56,0,0,0,0,0,0,0,0,0,120,254,163,0,0,0,0,0,0,0,0,0,0,0,0,23,231,254,29,0,0,0,0,0,0,0,0,0,159,254,120,0,0,0,0,0,0,0,0,0,0,0,0,163,254,216,16,0,0,0,0,0,0,0,0,0,159,254,67,0,0,0,0,0,0,0,0,0,14,86,178,248,254,91,0,0,0,0,0,0,0,0,0,0,159,254,85,0,0,0,47,49,116,144,150,241,243,234,179,241,252,40,0,0,0,0,0,0,0,0,0,0,150,253,237,207,207,207,253,254,250,240,198,143,91,28,5,233,250,0,0,0,0,0,0,0,0,0,0,0,0,119,177,177,177,177,177,98,56,0,0,0,0,0,102,254,220,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,169,254,137,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,169,254,57,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,169,254,57,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,169,255,94,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,169,254,96,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,169,254,153,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,169,255,153,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,254,153,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
# result = clf.predict([myNumber])
# print("이 숫자는 -->", result, "입니다. 단,", score*100, "%의 확률입니다.")     # 퍼센트를 알려주어야 함

# 5. 모델(=인공지능)을 파일로 저장하기
import joblib
filename = "bmi_knn_" + str(score) + ".dmp"
joblib.dump(clf, filename)

print("OK~")

